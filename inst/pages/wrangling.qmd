# Data wrangling {#sec-datawrangling}

```{r setup, echo=FALSE, results="asis"}
library(rebook)
chapterPreamble()
```

This chapter introduces several essential techniques for preparing data for
analysis. These techniques include splitting data, modifying data, 
and converting data to a `data.frame.` Additionally, it explains how to merge 
multiple `SummarizedExperiment` objects when needed. For a basic understanding
of  `TreeSE` please refer to [@sec-containers]

## Splitting {#sec-splitting}

You can split the data based on variables by using the functions 
`agglomerateByRanks()` and `splitOn()`. The former is detailed in
[@sec-agglomeration].

If you want to split the data based on a variable other than taxonomic rank, use 
`splitOn()`. It works for row-wise and column-wise splitting. We might want to 
split the data, Splitting the data may be useful, for example, if you want to 
analyze data from different cohorts separately.

```{r}
#| label: splitOn

library(mia)
data("GlobalPatterns")
tse <- GlobalPatterns

splitOn(tse, "SampleType")
```

## Add or modify variables {#sec-add-or-modify-data}

The information contained by the `colData` of a `TreeSE` can be added and/or 
modified by accessing the desired variables. You might want to add or modify 
this data to include new variables or update existing ones, which can be essential 
for ensuring that all relevant metadata is available for subsequent analyses.

```{r}
#| label: modify_coldata

# modify the Description entries
colData(tse)$Description <- paste(
    colData(tse)$Description, "modified description")

# view modified variable
tse$Description |> head()
```

New information can be added to the experiment by creating a new variable.

```{r}
#| label: add-coldata

# simulate new data
new_data <- runif(ncol(tse))

# store new data as new variable in colData
colData(tse)$NewVariable <- new_data

# view new variable
tse$NewVariable |> head()
```

Alternatively, you can add whole table by merging it with existing `colData`.

```{r}
#| label: add-coldata2

# simulate new data
new_data <- data.frame(var1 = runif(ncol(tse)), var2 = runif(ncol(tse)))
rownames(new_data) <- colnames(tse)

# Combine existing data with new data
colData(tse) <- cbind(colData(tse), new_data)
```

Similar steps can also be applied to `rowData`. If you have an assay whose
rows and columns aling with the existing ones, you can add the assay easily
to the `TreeSE` object.

Here we add an assay that has random numbers but in real life these steps
might come handy after you have transformed the data with custom transformation
that cannot be found from `mia`.

```{r}
#| label: add_assay

# Create a matrix with random values
mat <- rnorm(ncol(tse)*nrow(tse), 0, 1)
mat <- matrix(mat, ncol = ncol(tse), nrow = nrow(tse))
# Add matrix to tse
assay(tse, "random", withDimnames = FALSE) <- mat

assayNames(tse)
```

Now we can see that the `TreeSE` object has now an additional assay called
"random". When adding new samples or
features to your existing dataset, you can use `cbind()` to combine columns for
new features or `rbind()` to add rows for new samples.

```{r}
#| label: combine-cols

tse2 <- cbind(tse, tse)
tse2
```

However, the aforementioned functions assume that the rows align correctly when
combining columns, and vice versa. In practice, this is often not the case;
for example, samples may have different feature sets. In such situations, using
a merging approach is the appropriate method.

## Merge data

`mia` package has `mergeSEs()` function that merges multiple
`SummarizedExperiment` objects. For example, it is possible to combine
multiple `TreeSE` objects which each includes one sample.

`mergeSEs()` works much like standard joining operations. It combines rows and 
columns and allows you to specify the merging method.

```{r}
#| label: merge1

# Take subsets for demonstration purposes
tse1 <- tse[, 1]
tse2 <- tse[, 2]
tse3 <- tse[, 3]
tse4 <- tse[1:100, 4]
```

```{r}
#| label: merge2

# With inner join, we want to include all shared rows. When using mergeSEs
# function all samples are always preserved.
tse <- mergeSEs(list(tse1, tse2, tse3, tse4), join = "inner")
tse
```

```{r}
#| label: merge3

# Left join preserves all rows of the 1st object
tse <- mergeSEs(tse1, tse4, missing.values = 0, join = "left")
tse
```

## Melting data

For several custom analysis and visualization packages, such as those from
`tidyverse`, the `SE` data can be converted to a long `data.frame` format with 
`meltSE()`.    

```{r}
#| label: melt-data

library(knitr)

# Melt SE object
molten_tse <- meltSE(
    tse,
    add.row = TRUE,
    add.col = TRUE,
    assay.type = "counts")

molten_tse |> head() |> kable()
```
